.TH "tcurl" "1" "September 2015" "v4.13.1" "tcurl"
.SH "NAME"
\fBtcurl\fR \- curl for tchannel
.SH SYNOPSIS
.P
\fBtcurl\fR   [\-\-help] [\-H] [\-p] [\-t]
        [\-2 | \-\-arg2 | \-\-head] [\-3 | \-\-arg3 | \-\-body]
        [\-\-shardKey] [\-\-no\-strict] [\-\-timeout]
        [\-\-http] [\-\-raw] [\-\-health]
.SH DESCRIPTION
.P
\fBtcurl\fR is a tool for constructing and sending tchannel requests to
a service\.
.P
It supports thrift, JSON, and raw request format\.
.SH EXAMPLES
.RS 0
.IP \(bu 2
\fBtcurl -p localhost:8080 serviceName --health\fR
.IP \(bu 2
\fBtcurl -p 127.0.0.1:21300 hyperbahn Hyperbahn::discover -t ./hyperbahn.thrift -3 '{"query":{"serviceName":"ringpop"}}'\fR
.IP \(bu 2
\fBtcurl -p localhost:8080 serviceName endpoint --raw -3 'message'\fR

.RE
.SH OPTIONS
.P
\fB\-p host:port serviceName [endpoint]\fR
    Specify the destination where the request should be sent to
    including the host, the port, the serviceName, and the endpoint\.
    When used with \-\-health, endpoint is not required\.
.P
\fB\-H host-file serviceName [endpoint]\fR
    Similar to the \-p option. Instead of the host:port, it takes a host-file
    that contains a list of host:port where this request can be sent to\.
    TChannel will only pick one host:port to send the request to\. 
.P
\fB\-\-health\fR
    Send a health check request to a sevice that implements the "Meta::health"
    health check endpoint\.
    For example:
    ```
    tcurl -p 127.0.0.1:21300 serviceName --heath
    ```
    It is the same as:
    ```
    tcurl -p 127.0.0.1:21300 serviceName Meta::health -t meta.thrift
    ```
.P
\fB\-2 | \-\-arg2 | \-\-head content\fR
    Specify the head (a.k.a. arg2) of the request\. The content can be either a
    raw string or a JSON string depending on the request format\.
.P
\fB\-2 | \-\-arg3 | \-\-body content\fR
    Specify the body (a.k.a. arg3) of the request\. The content can be either a
    raw string or a JSON string depending on the request format\.
.P
    An example of a JSON string would be
    ```
    '{"query":{"serviceName":"ringpop"}}',
    ```
.P
    where the corresponding thrift IDL format is:
    ```
    struct DiscoveryQuery {
      1: required string serviceName
    }

    service Hyperbahn {
        DiscoveryResult discover(
            1: required DiscoveryQuery query
        )
    }
    ```
.P
\fB\-t thrift\fR
    Used with the thrift encoding to specify the path to the thrift files.
    The thrift option value can either point to a file or a directory\.
    For example:
    ```
    tcurl -p 127.0.0.1:21300 serviceName Meta::health -t . -3 null
    ```
    The above command assumes that current folder contains the meta.thrift IDL file\.

.P
\fB\-\-no\-strict\fR
    Disable the default strict mode of thrift parsing. When strict mode is enabled,
    all fields must be specified as either "required" or "optional"\.

.P
\fB\-\-raw\fR
    Use raw format (i.e. plain text) for request\.

.P
\fB\-\-http method\fR
    Send an http request described in the form of tchannel\.
    For example:
    ```
    tcurl -p 127.0.0.1:21300 echoServer '/echo' --http 'POST' --head '{"Accept": "text/plain"}' --body '"hello world!"'
    ```

.P
\fB\-\-timeout value\fR
    Specify the maximum time in miniseconds this request can take
    until it timeout. 
    For example, the following command specifies a timeout value
    of one second:
    ```
    tcurl -p 127.0.0.1:8080 serviceName endpoint --timeout 1000 
    ```

.P
\fB\-\-shardKey\fR
    Ringpop only. Send ringpop shardKey transport header\.


.SH EXIT CODES
.P
 - \fB0: for all successful requests\fR
 - \fB1: timeout\fR
 - \fB2: cancelled\fR
 - \fB3: busy\fR
 - \fB4: declined\fR
 - \fB5: unexpected error\fR
 - \fB6: bad request\fR
 - \fB7: network error\fR
 - \fB8: unhealthy (broken circuit)\fR
 - \fB124: unhealthy / not OK thrift response\fR
 - \fB125: misc tcurl / tchannel internal error\fR
 - \fB126: response not ok error\fR
 - \fB127: fatal protocol error\fR


.SH BUGS
.P
Please report any bugs to https://github\.com/uber/tcurl
.SH LICENCE
.P
MIT Licenced
.SH SEE ALSO
.P
 - TChannel: https://github\.com/uber/tchannel
 - Hyperbahn: https://github\.com/uber/hyperbahn
 - Ringpop: https://github\.com/uber/ringpop-node

.RE


